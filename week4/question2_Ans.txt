Question : Write a procedure to list all order details for each order for a particular date range of OrderDate.
Calculate and print the total value of all the orders for that date range.

Solution : 

%rowType version : 
CREATE OR REPLACE PROCEDURE prc_nested_cursor_rowtype (
    p_start_date IN DATE,
    p_end_date   IN DATE
) IS
    -- Declare cursors
    CURSOR cur_orders IS
        SELECT * FROM orders
        WHERE requiredDate >= p_start_date AND shippedDate <= p_end_date;

    CURSOR cur_customer(p_cust_no customers.customerNumber%TYPE) IS
        SELECT * FROM customers WHERE customerNumber = p_cust_no;

    CURSOR cur_orderdetails(p_order_no orders.orderNumber%TYPE) IS
        SELECT * FROM orderdetails WHERE orderNumber = p_order_no;

    CURSOR cur_product(p_code products.productCode%TYPE) IS
        SELECT * FROM products WHERE productCode = p_code;

    -- Declare records using %ROWTYPE
    v_order_rec     orders%ROWTYPE;
    v_cust_rec      customers%ROWTYPE;
    v_od_rec        orderdetails%ROWTYPE;
    v_product_rec   products%ROWTYPE;

    -- Counters
    v_subtotal        NUMBER := 0;
    v_order_total     NUMBER := 0;
    v_grand_total     NUMBER := 0;
    v_order_count     NUMBER := 0;
    v_item_count      NUMBER := 0;
BEGIN
    OPEN cur_orders;
    LOOP
        FETCH cur_orders INTO v_order_rec;
        EXIT WHEN cur_orders%NOTFOUND;

        v_order_total := 0;
        v_item_count := 0;
        v_order_count := v_order_count + 1;

        -- Fetch customer
        OPEN cur_customer(v_order_rec.customerNumber);
        FETCH cur_customer INTO v_cust_rec;
        CLOSE cur_customer;

        DBMS_OUTPUT.PUT_LINE('=========================================');
        DBMS_OUTPUT.PUT_LINE('Order #: ' || v_order_rec.orderNumber);
        DBMS_OUTPUT.PUT_LINE('Customer: ' || v_cust_rec.customerName);
        DBMS_OUTPUT.PUT_LINE('Order Date: ' || TO_CHAR(v_order_rec.orderDate, 'DD-MM-YYYY'));

        -- Fetch order details
        OPEN cur_orderdetails(v_order_rec.orderNumber);
        LOOP
            FETCH cur_orderdetails INTO v_od_rec;
            EXIT WHEN cur_orderdetails%NOTFOUND;

            -- Fetch product
            OPEN cur_product(v_od_rec.productCode);
            FETCH cur_product INTO v_product_rec;
            CLOSE cur_product;

            v_subtotal := v_od_rec.quantityOrdered * v_od_rec.priceEach;
            v_order_total := v_order_total + v_subtotal;
            v_item_count := v_item_count + 1;

            DBMS_OUTPUT.PUT_LINE(
                RPAD(v_product_rec.productCode, 12) || ' ' ||
                RPAD(v_product_rec.productName, 25) || ' Qty: ' ||
                LPAD(v_od_rec.quantityOrdered, 4) || ' Price: $' ||
                TO_CHAR(v_od_rec.priceEach, '999.99') || ' Subtotal: $' ||
                TO_CHAR(v_subtotal, '999,999.99')
            );
        END LOOP;
        CLOSE cur_orderdetails;

        DBMS_OUTPUT.PUT_LINE('Total Items: ' || v_item_count);
        DBMS_OUTPUT.PUT_LINE('Order Total: $' || TO_CHAR(v_order_total, '999,999.99'));

        v_grand_total := v_grand_total + v_order_total;
    END LOOP;
    CLOSE cur_orders;

    DBMS_OUTPUT.PUT_LINE('=========================================');
    DBMS_OUTPUT.PUT_LINE('Total Orders: ' || v_order_count);
    DBMS_OUTPUT.PUT_LINE('Grand Total: $' || TO_CHAR(v_grand_total, '999,999.99'));

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


%type version 
CREATE OR REPLACE PROCEDURE prc_nested_cursor_type (
    p_start_date IN DATE,
    p_end_date   IN DATE
) IS
    -- Cursors same as above
    CURSOR cur_orders IS
        SELECT orderNumber, customerNumber, orderDate, requiredDate, shippedDate
        FROM orders
        WHERE requiredDate >= p_start_date AND shippedDate <= p_end_date;

    CURSOR cur_customer(p_cust_no customers.customerNumber%TYPE) IS
        SELECT customerName FROM customers WHERE customerNumber = p_cust_no;

    CURSOR cur_orderdetails(p_order_no orders.orderNumber%TYPE) IS
        SELECT orderLineNumber, productCode, quantityOrdered, priceEach
        FROM orderdetails WHERE orderNumber = p_order_no;

    CURSOR cur_product(p_code products.productCode%TYPE) IS
        SELECT productName FROM products WHERE productCode = p_code;

    -- Declare variables using %TYPE
    v_order_no       orders.orderNumber%TYPE;
    v_cust_no        customers.customerNumber%TYPE;
    v_order_date     orders.orderDate%TYPE;
    v_cust_name      customers.customerName%TYPE;

    v_prod_code      products.productCode%TYPE;
    v_prod_name      products.productName%TYPE;

    v_qty            orderdetails.quantityOrdered%TYPE;
    v_price          orderdetails.priceEach%TYPE;

    -- Counters
    v_subtotal        NUMBER := 0;
    v_order_total     NUMBER := 0;
    v_grand_total     NUMBER := 0;
    v_order_count     NUMBER := 0;
    v_item_count      NUMBER := 0;
BEGIN
    OPEN cur_orders;
    LOOP
        FETCH cur_orders INTO v_order_no, v_cust_no, v_order_date, v_order_date, v_order_date;
        EXIT WHEN cur_orders%NOTFOUND;

        v_order_total := 0;
        v_item_count := 0;
        v_order_count := v_order_count + 1;

        -- Fetch customer
        OPEN cur_customer(v_cust_no);
        FETCH cur_customer INTO v_cust_name;
        CLOSE cur_customer;

        DBMS_OUTPUT.PUT_LINE('=========================================');
        DBMS_OUTPUT.PUT_LINE('Order #: ' || v_order_no);
        DBMS_OUTPUT.PUT_LINE('Customer: ' || v_cust_name);
        DBMS_OUTPUT.PUT_LINE('Order Date: ' || TO_CHAR(v_order_date, 'DD-MM-YYYY'));

        -- Fetch order details
        OPEN cur_orderdetails(v_order_no);
        LOOP
            FETCH cur_orderdetails INTO v_prod_code, v_prod_code, v_qty, v_price;
            EXIT WHEN cur_orderdetails%NOTFOUND;

            -- Fetch product name
            OPEN cur_product(v_prod_code);
            FETCH cur_product INTO v_prod_name;
            CLOSE cur_product;

            v_subtotal := v_qty * v_price;
            v_order_total := v_order_total + v_subtotal;
            v_item_count := v_item_count + 1;

            DBMS_OUTPUT.PUT_LINE(
                RPAD(v_prod_code, 12) || ' ' ||
                RPAD(v_prod_name, 25) || ' Qty: ' ||
                LPAD(v_qty, 4) || ' Price: $' ||
                TO_CHAR(v_price, '999.99') || ' Subtotal: $' ||
                TO_CHAR(v_subtotal, '999,999.99')
            );
        END LOOP;
        CLOSE cur_orderdetails;

        DBMS_OUTPUT.PUT_LINE('Total Items: ' || v_item_count);
        DBMS_OUTPUT.PUT_LINE('Order Total: $' || TO_CHAR(v_order_total, '999,999.99'));

        v_grand_total := v_grand_total + v_order_total;
    END LOOP;
    CLOSE cur_orders;

    DBMS_OUTPUT.PUT_LINE('=========================================');
    DBMS_OUTPUT.PUT_LINE('Total Orders: ' || v_order_count);
    DBMS_OUTPUT.PUT_LINE('Grand Total: $' || TO_CHAR(v_grand_total, '999,999.99'));

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

example ouput  :
=========================================
Order #: 10123
Customer: Classic Cars
Order Date: 03-02-2025
Product Code  Product Name               Qty:       Price:          Subtotal:
S10_1678      1969 Harley Davidson       Qty:   30  Price: $ 95.70  Subtotal: $2,871.00
S10_1949      1952 Alpine Renault        Qty:   22  Price: $ 98.58  Subtotal: $2,168.76
Total Items: 2
Order Total: $5,039.76

=========================================
Order #: 10125
Customer: Auto-Drive GmbH
Order Date: 05-02-2025
Product Code  Product Name               Qty:       Price:          Subtotal:
S12_1099      1968 Ford Mustang          Qty:   18  Price: $102.00  Subtotal: $1,836.00
S18_3232      1998 Chrysler Plymouth     Qty:   25  Price: $115.50  Subtotal: $2,887.50
S24_3969      1932 Alfa Romeo            Qty:   14  Price: $134.25  Subtotal: $1,879.50
Total Items: 3
Order Total: $6,603.00

=========================================
Order #: 10127
Customer: Speed Motors Co.
Order Date: 09-02-2025
Product Code  Product Name               Qty:       Price:          Subtotal:
S10_4962      1993 Mazda RX-7            Qty:   40  Price: $ 92.75  Subtotal: $3,710.00
Total Items: 1
Order Total: $3,710.00

=========================================
Total Orders: 3
Grand Total: $15,352.76
